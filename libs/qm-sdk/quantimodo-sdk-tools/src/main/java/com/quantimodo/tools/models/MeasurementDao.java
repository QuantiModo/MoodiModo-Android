package com.quantimodo.tools.models;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.quantimodo.tools.models.Measurement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASUREMENT".
*/
public class MeasurementDao extends AbstractDao<Measurement, Long> {

    public static final String TABLENAME = "MEASUREMENT";

    /**
     * Properties of entity Measurement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Timestamp = new Property(1, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property VariableId = new Property(2, Long.class, "variableId", false, "VARIABLE_ID");
        public final static Property UnitId = new Property(3, Long.class, "unitId", false, "UNIT_ID");
        public final static Property Value = new Property(4, double.class, "value", false, "VALUE");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property NeedUpdate = new Property(6, Boolean.class, "needUpdate", false, "NEED_UPDATE");
        public final static Property Note = new Property(7, String.class, "note", false, "NOTE");
        public final static Property VariableName = new Property(8, String.class, "variableName", false, "VARIABLE_NAME");
        public final static Property UnitName = new Property(9, String.class, "unitName", false, "UNIT_NAME");
    };

    private DaoSession daoSession;


    public MeasurementDao(DaoConfig config) {
        super(config);
    }
    
    public MeasurementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASUREMENT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 1: timestamp
                "\"VARIABLE_ID\" INTEGER," + // 2: variableId
                "\"UNIT_ID\" INTEGER," + // 3: unitId
                "\"VALUE\" REAL NOT NULL ," + // 4: value
                "\"SOURCE\" TEXT," + // 5: source
                "\"NEED_UPDATE\" INTEGER," + // 6: needUpdate
                "\"NOTE\" TEXT," + // 7: note
                "\"VARIABLE_NAME\" TEXT NOT NULL ," + // 8: variableName
                "\"UNIT_NAME\" TEXT NOT NULL );"); // 9: unitName
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "pk ON MEASUREMENT" +
                " (\"TIMESTAMP\",\"VARIABLE_NAME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASUREMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Measurement entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTimestamp().getTime());
 
        Long variableId = entity.getVariableId();
        if (variableId != null) {
            stmt.bindLong(3, variableId);
        }
 
        Long unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(4, unitId);
        }
        stmt.bindDouble(5, entity.getValue());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        Boolean needUpdate = entity.getNeedUpdate();
        if (needUpdate != null) {
            stmt.bindLong(7, needUpdate ? 1L: 0L);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(8, note);
        }
        stmt.bindString(9, entity.getVariableName());
        stmt.bindString(10, entity.getUnitName());
    }

    @Override
    protected void attachEntity(Measurement entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Measurement readEntity(Cursor cursor, int offset) {
        Measurement entity = new Measurement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // variableId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // unitId
            cursor.getDouble(offset + 4), // value
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // needUpdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // note
            cursor.getString(offset + 8), // variableName
            cursor.getString(offset + 9) // unitName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Measurement entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setVariableId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUnitId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setValue(cursor.getDouble(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNeedUpdate(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setNote(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVariableName(cursor.getString(offset + 8));
        entity.setUnitName(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Measurement entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Measurement entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getVariableDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUnitDao().getAllColumns());
            builder.append(" FROM MEASUREMENT T");
            builder.append(" LEFT JOIN VARIABLE T0 ON T.\"VARIABLE_ID\"=T0.\"ID\"");
            builder.append(" LEFT JOIN UNIT T1 ON T.\"UNIT_ID\"=T1.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Measurement loadCurrentDeep(Cursor cursor, boolean lock) {
        Measurement entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Variable variable = loadCurrentOther(daoSession.getVariableDao(), cursor, offset);
        entity.setVariable(variable);
        offset += daoSession.getVariableDao().getAllColumns().length;

        Unit unit = loadCurrentOther(daoSession.getUnitDao(), cursor, offset);
        entity.setUnit(unit);

        return entity;    
    }

    public Measurement loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Measurement> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Measurement> list = new ArrayList<Measurement>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Measurement> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Measurement> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
