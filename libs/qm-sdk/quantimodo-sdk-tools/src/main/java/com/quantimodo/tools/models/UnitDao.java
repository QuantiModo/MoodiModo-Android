package com.quantimodo.tools.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.quantimodo.tools.models.Unit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UNIT".
*/
public class UnitDao extends AbstractDao<Unit, Long> {

    public static final String TABLENAME = "UNIT";

    /**
     * Properties of entity Unit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Min = new Property(2, Double.class, "min", false, "MIN");
        public final static Property Max = new Property(3, Double.class, "max", false, "MAX");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property AbbreviatedName = new Property(5, String.class, "abbreviatedName", false, "ABBR");
    };

    private DaoSession daoSession;


    public UnitDao(DaoConfig config) {
        super(config);
    }
    
    public UnitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNIT\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"MIN\" REAL," + // 2: min
                "\"MAX\" REAL," + // 3: max
                "\"CATEGORY\" TEXT," + // 4: category
                "\"ABBR\" TEXT NOT NULL UNIQUE );"); // 5: abbreviatedName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNIT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Unit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Double min = entity.getMin();
        if (min != null) {
            stmt.bindDouble(3, min);
        }
 
        Double max = entity.getMax();
        if (max != null) {
            stmt.bindDouble(4, max);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
        stmt.bindString(6, entity.getAbbreviatedName());
    }

    @Override
    protected void attachEntity(Unit entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Unit readEntity(Cursor cursor, int offset) {
        Unit entity = new Unit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // min
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // max
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.getString(offset + 5) // abbreviatedName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Unit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setMin(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setMax(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAbbreviatedName(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Unit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Unit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
